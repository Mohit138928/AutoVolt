// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ChatInteraction {
  id                String   @id @default(uuid())
  userId            String
  userMessage       String
  aiResponse        String
  preferences       Json
  recommendedCarIds String[]
  createdAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
  recommendedCars   Car[]    @relation("ChatRecommendations")

  @@index([userId])
}

model MaintenancePrediction {
  id                   String   @id @default(uuid())
  userId               String
  carId                String
  nextServices         Json // Array of service predictions
  partsReplacement     Json // Array of parts to replace
  totalMaintenanceCost Float
  maintenanceSchedule  Json // Scheduled maintenance tasks
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id])
  car                  Car      @relation(fields: [carId], references: [id])

  @@index([userId])
  @@index([carId])
}

model EnvironmentalImpact {
  id                   String   @id @default(uuid())
  userId               String
  carId                String
  carbonFootprint      Json
  greenScore           Json
  environmentalMetrics Json
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id])
  car                  Car      @relation(fields: [carId], references: [id])

  @@index([userId])
  @@index([carId])
}

model PriceAnalysis {
  id                   String   @id @default(uuid())
  userId               String
  carId                String
  marketValue          Json
  priceAnalysis        Json
  buyingRecommendation Json
  seasonalTrends       Json
  createdAt            DateTime @default(now())
  user                 User     @relation(fields: [userId], references: [id])
  car                  Car      @relation(fields: [carId], references: [id])

  @@index([userId])
  @@index([carId])
}

model User {
  id                     String                  @id @default(uuid())
  clerkUserId            String                  @unique // clerk user id
  email                  String                  @unique
  name                   String?
  imageUrl               String?
  phone                  String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  role                   UserRole                @default(USER)
  savedCars              UserSavedCar[]
  testDrives             TestDriveBooking[]
  chatInteractions       ChatInteraction[]
  maintenancePredictions MaintenancePrediction[]
  environmentalImpacts   EnvironmentalImpact[]
  priceAnalyses          PriceAnalysis[]
}

enum UserRole {
  USER
  ADMIN
}

model Car {
  id                     String                  @id @default(uuid())
  make                   String
  model                  String
  year                   Int
  price                  Decimal                 @db.Decimal(10, 2)
  mileage                Int
  color                  String
  fuelType               String
  transmission           String
  bodyType               String
  seats                  Int?
  description            String
  status                 CarStatus               @default(AVAILABLE)
  featured               Boolean                 @default(false)
  images                 String[] // Array of Supabase storage URLs
  savedBy                UserSavedCar[]
  testDriveBookings      TestDriveBooking[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  chatRecommendations    ChatInteraction[]       @relation("ChatRecommendations")
  maintenancePredictions MaintenancePrediction[]
  greenScore             Float?                  @default(0)
  environmentalMetrics   Json?
  environmentalImpacts   EnvironmentalImpact[]
  priceHistory           Json? // Array of historical prices
  priceAnalyses          PriceAnalysis[]

  @@index([make, model])
  @@index([bodyType])
  @@index([price])
  @@index([year])
  @@index([status])
  @@index([fuelType])
  @@index([featured])
}

enum CarStatus {
  AVAILABLE
  UNAVAILABLE
  SOLD
}

// Single dealership configuration, if you have multiple dealerships, you can remove default values.
model DealershipInfo {
  id           String        @id @default(uuid())
  name         String        @default("AutoVolt Motors")
  address      String        @default("69 Car Street, Autoville, CA 69420")
  phone        String        @default("+1 (555) 123-4567")
  email        String        @default("contact@autovolt.com")
  workingHours WorkingHour[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Working hours configuration
model WorkingHour {
  id           String         @id @default(uuid())
  dealershipId String
  dealership   DealershipInfo @relation(fields: [dealershipId], references: [id], onDelete: Cascade)
  dayOfWeek    DayOfWeek
  openTime     String // Format: "HH:MM" (24-hour)
  closeTime    String // Format: "HH:MM" (24-hour)
  isOpen       Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([dealershipId, dayOfWeek])
  @@index([dealershipId])
  @@index([dayOfWeek])
  @@index([isOpen])
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model UserSavedCar {
  id      String   @id @default(uuid())
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  carId   String
  car     Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  savedAt DateTime @default(now())

  @@unique([userId, carId])
  @@index([userId])
  @@index([carId])
}

model TestDriveBooking {
  id          String        @id @default(uuid())
  carId       String
  car         Car           @relation(fields: [carId], references: [id])
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  bookingDate DateTime      @db.Date
  startTime   String // Format: "HH:MM" (24-hour)
  endTime     String // Format: "HH:MM" (24-hour)
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([carId])
  @@index([userId])
  @@index([bookingDate])
  @@index([status])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
